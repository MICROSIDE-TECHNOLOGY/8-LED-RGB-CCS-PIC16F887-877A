CCS PCM C Compiler, Version 5.115d, 1               29-ago.-23 16:49
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\victo\OneDrive\Documentos\X-TRAINER-hands-on\CCS\PIC16F\8-LED-RGB-CCS-PIC16F887-877A\Proyecto\PIC16F877A\LED RGB.lst

               ROM used:   169 words (2%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           9 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   060
0003:  NOP
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... File Name:
.................... LED RGB.c
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Esta práctica consiste en realizar un control PWM
.................... para el control de un LED RGB
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <16F877A.h>                     //Incluye el microcontrolador con el que se va a trabajar 
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
.................... 
.................... #list
.................... 
.................... #use delay(clock=20Mhz, crystal)         //Tipo de oscilador y frecuencia dependiendo del microcontrolador 
0004:  MOVLW  23
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... 
.................... #define LEDR PIN_B0                      //Pin donde está conectado el LED rojo
.................... #define LEDV PIN_B1                      //Pin donde está conectado el LED verde
.................... #define LEDA PIN_B2                      //Pin donde está conectado el LED azul
.................... 
.................... unsigned int16 Duty = 0;                 //Variable para guardar el valor para PWM
.................... 
.................... void Set_PWM ( void ) {
....................    for (Duty = 255; Duty > 0; Duty--) {  // Ciclo para disminuir el valor de la variable
0018:  CLRF   21
0019:  MOVLW  FF
001A:  MOVWF  20
001B:  MOVF   20,F
001C:  BTFSS  03.2
001D:  GOTO   021
001E:  MOVF   21,F
001F:  BTFSC  03.2
0020:  GOTO   03C
....................       set_pwm1_duty (Duty);              // Guarda la salida PWM en la variable
0021:  MOVF   21,W
0022:  MOVWF  79
0023:  MOVF   20,W
0024:  MOVWF  78
0025:  RRF    79,F
0026:  RRF    78,F
0027:  RRF    79,F
0028:  RRF    78,F
0029:  RRF    79,F
002A:  MOVF   78,W
002B:  MOVWF  15
002C:  RRF    79,F
002D:  RRF    79,W
002E:  ANDLW  30
002F:  MOVWF  77
0030:  MOVF   17,W
0031:  ANDLW  CF
0032:  IORWF  77,W
0033:  MOVWF  17
....................       delay_ms (5);                      // Retardo
0034:  MOVLW  05
0035:  MOVWF  23
0036:  CALL   004
0037:  MOVF   20,W
0038:  BTFSC  03.2
0039:  DECF   21,F
003A:  DECF   20,F
003B:  GOTO   01B
....................    }
.................... 
....................    for (Duty = 0; Duty < 255; Duty++) {  // Ciclo para aumentar el valor de la variable
003C:  CLRF   21
003D:  CLRF   20
003E:  MOVF   21,F
003F:  BTFSS  03.2
0040:  GOTO   05F
0041:  MOVF   20,W
0042:  SUBLW  FE
0043:  BTFSS  03.0
0044:  GOTO   05F
....................       set_pwm1_duty (Duty);              // Guarda la salida PWM en la variable
0045:  MOVF   21,W
0046:  MOVWF  79
0047:  MOVF   20,W
0048:  MOVWF  78
0049:  RRF    79,F
004A:  RRF    78,F
004B:  RRF    79,F
004C:  RRF    78,F
004D:  RRF    79,F
004E:  MOVF   78,W
004F:  MOVWF  15
0050:  RRF    79,F
0051:  RRF    79,W
0052:  ANDLW  30
0053:  MOVWF  77
0054:  MOVF   17,W
0055:  ANDLW  CF
0056:  IORWF  77,W
0057:  MOVWF  17
....................       delay_ms (5);                      // Retardo
0058:  MOVLW  05
0059:  MOVWF  23
005A:  CALL   004
005B:  INCF   20,F
005C:  BTFSC  03.2
005D:  INCF   21,F
005E:  GOTO   03E
....................    }
005F:  RETURN
.................... }
.................... 
.................... void main ( void ) {
0060:  MOVF   03,W
0061:  ANDLW  1F
0062:  MOVWF  03
0063:  CLRF   21
0064:  CLRF   20
0065:  MOVLW  FF
0066:  MOVWF  22
0067:  BSF    03.5
0068:  BSF    1F.0
0069:  BSF    1F.1
006A:  BSF    1F.2
006B:  BCF    1F.3
006C:  MOVLW  07
006D:  MOVWF  1C
006E:  BCF    03.7
....................    setup_timer_2 (T2_DIV_BY_16, 254, 1); //Configura Timer2, periodo ajustado a 342uS
006F:  MOVLW  00
0070:  MOVWF  78
0071:  IORLW  06
0072:  BCF    03.5
0073:  MOVWF  12
0074:  MOVLW  FE
0075:  BSF    03.5
0076:  MOVWF  12
....................    setup_ccp1 (CCP_PWM);                 //Configura el módulo CCP para uso del PWM
0077:  BCF    03.5
0078:  BCF    22.2
0079:  MOVF   22,W
007A:  BSF    03.5
007B:  MOVWF  07
007C:  BCF    03.5
007D:  BCF    07.2
007E:  MOVLW  0C
007F:  MOVWF  17
.................... 
....................     while ( 1 ) {                        // Ciclo infinito
....................        output_high ( LEDR );
0080:  BSF    03.5
0081:  BCF    06.0
0082:  BCF    03.5
0083:  BSF    06.0
....................        output_low ( LEDV );
0084:  BSF    03.5
0085:  BCF    06.1
0086:  BCF    03.5
0087:  BCF    06.1
....................        output_low ( LEDA );
0088:  BSF    03.5
0089:  BCF    06.2
008A:  BCF    03.5
008B:  BCF    06.2
.................... 
....................        Set_PWM ( );                      // Convocamos la función
008C:  CALL   018
.................... 
....................        output_low ( LEDR );
008D:  BSF    03.5
008E:  BCF    06.0
008F:  BCF    03.5
0090:  BCF    06.0
....................        output_high ( LEDV );
0091:  BSF    03.5
0092:  BCF    06.1
0093:  BCF    03.5
0094:  BSF    06.1
....................        output_low ( LEDA );
0095:  BSF    03.5
0096:  BCF    06.2
0097:  BCF    03.5
0098:  BCF    06.2
.................... 
....................        Set_PWM ( );
0099:  CALL   018
.................... 
....................        output_low ( LEDR );
009A:  BSF    03.5
009B:  BCF    06.0
009C:  BCF    03.5
009D:  BCF    06.0
....................        output_low ( LEDV );
009E:  BSF    03.5
009F:  BCF    06.1
00A0:  BCF    03.5
00A1:  BCF    06.1
....................        output_high ( LEDA );
00A2:  BSF    03.5
00A3:  BCF    06.2
00A4:  BCF    03.5
00A5:  BSF    06.2
.................... 
....................        Set_PWM ( );
00A6:  CALL   018
00A7:  GOTO   080
....................      }
.................... }
00A8:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
